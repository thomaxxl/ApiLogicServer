# coding: utf-8
from sqlalchemy import Boolean, Column, DECIMAL, DateTime, Float, ForeignKey, Integer, LargeBinary, String, Table, Text, UniqueConstraint, text
from sqlalchemy.orm import relationship
from sqlalchemy.sql.sqltypes import NullType
from sqlalchemy.ext.declarative import declarative_base
from flask_sqlalchemy import SQLAlchemy
from safrs import SAFRSAPI, jsonapi_rpc
from safrs import JABase, DB

########################################################################################################################
# Classes describing database for SqlAlchemy ORM, initially created by schema introspection.
#
from safrs import SAFRSBase

import safrs
db = safrs.DB

Base = db.Model
metadata = Base.metadata

NullType = db.String  # datatype fixup
TIMESTAMP= db.TIMESTAMP

from sqlalchemy.dialects.mysql import *

########################################################################################################################

t_udfEmployeeInLocation = Table(  # define result for udfEmployeeInLocation
	"udfEmployeeInLocation", metadata,
	Column("Id", Integer),
	Column("Location", String(50)),
	Column("Name", String(50)))


t_udfEmployeeInLocationWithName = Table(  # define result for udfEmployeeInLocationWithName
	"udfEmployeeInLocationWithName", metadata,
	Column("Id", Integer),
	Column("Location", String(50)),
	Column("Name", String(50)))


class udfEmployeeInLocation(JABase):
	"""
		description: define service for udfEmployeeInLocation
	"""

	_s_type = "udfEmployeeInLocation"

	@staticmethod
	@jsonapi_rpc(http_methods=['POST'], valid_jsonapi=False)
	def udfEmployeeInLocation(location):
		"""
		description: expose TVF - udfEmployeeInLocation
		args:
			location : value
		"""
		sql_query = db.text("SELECT * FROM udfEmployeeInLocation(:location)")
		query_result = db.engine.execute(sql_query, location=location)
		result = query_result.fetchall()
		return {"result" : list(result[0])}


class udfEmployeeInLocationWithName(JABase):
	"""
		description: define service for udfEmployeeInLocationWithName
	"""

	_s_type = "udfEmployeeInLocationWithName"

	@staticmethod
	@jsonapi_rpc(http_methods=['POST'], valid_jsonapi=False)
	def udfEmployeeInLocationWithName(location, Name):
		"""
		description: expose TVF - udfEmployeeInLocationWithName
		args:
			location : value
			Name : value
		"""
		sql_query = db.text("SELECT * FROM udfEmployeeInLocationWithName(:location, :Name)")
		query_result = db.engine.execute(sql_query, location=location, Name=Name)
		result = query_result.fetchall()
		return {"result" : list(result[0])}


def expose_tvfs(api):
	api.expose_object(udfEmployeeInLocation)
	api.expose_object(udfEmployeeInLocationWithName)

#  2 services created.
